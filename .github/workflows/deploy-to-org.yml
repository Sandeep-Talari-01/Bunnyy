# Unique name for this workflow
name: Validate and Deploy to ORG

# Definition when the workflow should run
on:

  push:
    branches: [ Master ]

jobs:
  initial-setup:
    runs-on: ubuntu-latest
    steps:
      - name: 'Checkout source code'
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: 'Install Salesforce CLI'
        run: |
            wget https://developer.salesforce.com/media/salesforce-cli/sfdx/channels/stable/sfdx-linux-x64.tar.xz
            mkdir ~/sfdx
            tar xJf sfdx-linux-x64.tar.xz -C ~/sfdx --strip-components 1
            echo "$HOME/sfdx/bin" >> $GITHUB_PATH
            ~/sfdx/bin/sfdx version

      - name: 'Installing java'
        run: |
          sudo apt-get update
          sudo apt install default-jdk

      
      - name: 'Read PR Body'
        run: |
          if [[ "${{ github.event.head_commit.message }}" =~ "None" ]]; then
            TESTS="None"
          elif [[ "${{ github.event.head_commit.message }}" =~ Apex::\[.+?\]::Apex ]]; then
            TESTS=$(echo "${{ github.event.head_commit.message }}" | grep -oP '(?<=Apex::\[).+?(?=\]::Apex)')
          else
            TESTS="None"
          fi
          echo "APEX_TESTS=$TESTS" >> $GITHUB_ENV



      - name: 'Populate auth file with SFDX_URL secret of integration org'
        shell: bash
        run: |
             echo "force://PlatformCLI::5Aep861pw2VNBY3IWaEWUabUa0ERBhboCJdMqyQFg6pU5_v2oZLKQ2ylPWHsiN5nDGvavREqUDIElYftvPbxOZ_@bakerip--patch.sandbox.my.salesforce.com" > ./SFDX_INTEGRATION_URL.txt

            # Authenticate to org using the URL stored in the text file 
      - name: 'Authenticate to Integration Org'
        run: sfdx auth:sfdxurl:store -f ./SFDX_INTEGRATION_URL.txt -s -a integration


      - name: 'Deploy Delta changes - Run specified tests'
        if: ${{ env.APEX_TESTS != 'None' }}
        run: |
             git branch --show-current
             echo Tests that are about to Run during validation are :: ${{env.APEX_TESTS}}
             sfdx force:source:deploy --manifest "manifest/package.xml" --postdestructivechanges "manifest/destructiveChangesPost.xml" -l RunSpecifiedTests --runtests ${{env.APEX_TESTS}} --verbose
              
      - name: 'Deploy Delta changes - Run No tests'
        if: ${{ env.APEX_TESTS == 'None' }}
        run: |
             git branch --show-current
             sfdx force:source:deploy --manifest "manifest/package.xml" --postdestructivechanges "manifest/destructiveChangesPost.xml" -l NoTestRun --verbose 
               