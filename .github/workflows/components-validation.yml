# Unique name for this workflow
name: Components Validation

# Definition when the workflow should run
on:
    # The workflow will run whenever an event happens on a pull request
    pull_request:
      # The events are that a PR is opened, or when a commit is pushed
      # to a branch that has an existing pull request
      types: [opened, synchronize, reopened]
      # The branches filter allows to specify that this workflow should only
      # run if the branch name is "develop". This way we prevent this workflow
      # from running when PRs are opened on other branches
      branches: [ Master]
      # We only care about changes to the force-app directory, which is the
      # root directory of the sfdx project. This prevents the job from running
      # when changing non-salesforce files (like this yml file).
      paths:
        - 'force-app/**'
        - 'manifest/**'
            
# Jobs to be executed when the above conditions are met
jobs:
    # This is the name of the job. You can give it whatever name you want
    validate-deployment-on-org:
        # As mentioned in the blog post, this job runs inside a VM. Here we
        # can specify which OS this VM should run on. 
        # In this case, we are going to run our commands on the latest version
        # of ubuntu
        runs-on: ubuntu-latest
        if: ${{ github.actor != 'dependabot[bot]' }}
        steps:
            # Now we install nodejs in the VM, and specify version 14
            - uses: actions/setup-node@v4
              with:
                node-version: 20

            
            - name: 'Ignore engines from yarn'
              run: |
                   echo "Ignore engines"
                   yarn config set ignore-engines true 
                  
            # The idea is that the VM can access your remote repository
            # because your repository is an sfdx project.
            # This is a default action that allows us to enter the root 
            # directory of the repository

            # Make sure to specify fetch-depth:0. This allows us to
            # access previous commits that have been pushed to the repository.

            # We'll need this later when we try to figure out which metadata has 
            # changed between commits, so that we can only deploy that metadata
            # to the destination org
######################
            - name: 'Checkout source code'
              uses: actions/checkout@v4
              with:
                fetch-depth: 0
            
            # Install java as it is required for the next step
            # - name: 'Installing java'
            #   run: |
            #     sudo apt-get update
            #     sudo apt install default-jdk
            # Now, we need a way to let the developer specify which tests to run, which
            # could be all tests or just the tests relevant to their deployment.

            # To do this, we can ask the developer to name their test classes in the
            # body of the PR, using the following syntax

            # Apex::[CommunitiesLoginControllerTest,MyProfilePageControllerTest]::Apex
            # or Apex::[all]::Apex to run all tests

            # This special delimeter can be added to the PR template so that your 
            # team doesn't have to remember the syntax. 

            # Once a developer has specified a list of classes to run, we need to be able
            # to extract this information from the PR, and pass it on the the VM.

            - name: 'Read PR Body'
              env:
                # The pull request body is available through the github context object
                # we put the body of the pull request in an env variable (only available to this step)
                PR_BODY: ${{github.event.pull_request.body}}

              # Here we print the content of the environment variable and
              # pipe to a a text file.

              # Then we call the local script parsePR.js, which will create
              # a new file called testsToRun.txt. This file will have the list
              # of tests to run separated by a comma

              # Finally, we add the list of tests to the $GITHUB_ENV variable
              # as this allows us to reference the list in a subsequent step.  If you
              # were using a normal env variable, its value would not be available outside this step.
              run: |
                  if [[ "${{ github.event.pull_request.body }}" =~ "Apex::[None]::Apex" ]]; then
                    TESTS="None"
                  elif [[ "${{ github.event.pull_request.body }}" =~ Apex::\[.+?\]::Apex ]]; then
                    TESTS=$(echo "${{ github.event.pull_request.body }}" | grep -oP '(?<=Apex::\[).+?(?=\]::Apex)')
                  else
                    TESTS="None"
                  fi
                  echo "APEX_TESTS=$TESTS" >> $GITHUB_ENV
                  
            # Now Install Salesforce CLI
            - name: 'Install Salesforce CLI'
              run: |
                  wget https://developer.salesforce.com/media/salesforce-cli/sfdx/channels/stable/sfdx-linux-x64.tar.xz
                  mkdir ~/sfdx
                  tar xJf sfdx-linux-x64.tar.xz -C ~/sfdx --strip-components 1
                  echo "$HOME/sfdx/bin" >> $GITHUB_PATH
                  ~/sfdx/bin/sfdx version
            
                  
            # Prior to setting up this workflow, you have to create a Github Secret
            # that contains the sfdx url of the integration/qa org.

            # The steps to generate the url are here 
            # https://developer.salesforce.com/docs/atlas.en-us.sfdx_cli_reference.meta/sfdx_cli_reference/cli_reference_auth_sfdxurl.htm

            # This URL can then be used with the sfdx auth:sfdxurl:store to authenticate
            # the sfdx project in the repositry, against the org from which the URL
            # was generated from. This works just like that, there's no need to create
            # connected apps or any else. 

            # The URL is stored in the Github Secret named SFDX_INTEGRATION_URL
            # so here we store the URL into a text file
            - name: 'Populate auth file with SFDX_URL secret of integration org'
              shell: bash
              run: |
                  echo "force://PlatformCLI::5Aep861.1omPHNpXREliryPX9rv6lTtP159eYAo40pN1vL7lcvo8_WBi_eEGXhGw4cdOTeAhKzTLhW6YeS4Mh7E@bakerip--fullprodqa.sandbox.my.salesforce.com" > ./SFDX_INTEGRATION_URL.txt
            # Authenticate to org using the URL stored in the text file
            - name: 'Authenticate to Integration Org'
              run: sfdx auth:sfdxurl:store -f ./SFDX_INTEGRATION_URL.txt -s -a integration

            # Now we can use the sfdx scanner to scan the code in the delta directory..
            # The output of the scan is stored in a file called apexScanResults.sarif

            # The .sarif file can later be uploaded to github, so that we can see the 
            # results of the scan directly from the PR.
                  # sfdx scanner:run --format sarif --target './**/*.cls' --category "Design,Best Practices,Performance" --outfile 'apexScanResults.sarif'  

            # Install SFDX scanner
            # - name: 'Installing SFDX scanner'
            #   run: |
            #       sf plugins install @salesforce/sfdx-scanner@v4.2.0
            # # sf plugins install @salesforce/sfdx-scanner

            # - name: 'Scan code'
            #   run: |
            #       cd force-app
            #       sf scanner run -f table --target './**/*.cls' --category "Design,Best Practices,Performance"
            #       cd ..
            #       echo came back to root directory
            # Add --severity-threshold 3 tag at the end of the Scanner command  to throw a non-zero exit code when rule violations of a specific normalized severity or greater are found. 
            # When there are rule violations with moderate (2) or high (1) severity, the exit code equals the severity of the most severe violation.
            # Now we upload the .sarif file as explained in the previous step
            # - name: Upload SARIF file
            #   uses: github/codeql-action/upload-sarif@v3
            #   with:
            #     sarif_file: force-app/apexScanResults.sarif

            # - name: 'Detploy from source Org'
            #   run: |
            #       sfdx force:source:deploy -p force-app -c --verbose


            # sfdx force:source:deploy --manifest "manifest/package.xml" --postdestructivechanges "manifest/destructiveChangesPost.xml" -c -l RunSpecifiedTests --runtests ${{env.APEX_TESTS}} --verbose
            - name: 'Check-only deploy delta changes - run specified tests'
              if: ${{ env.APEX_TESTS != 'None' }}
              run: |
                  echo Tests that are about to Run during validation are :: ${{env.APEX_TESTS}}
                  sfdx force:source:deploy --manifest "manifest/package.xml" --postdestructivechanges "manifest/destructiveChangesPost.xml" -c -l RunSpecifiedTests --runtests ${{env.APEX_TESTS}} --verbose
              
                  
              # sf project deploy validate --manifest "manifest/package.xml" --postdestructivechanges "manifest/destructiveChangesPost.xml" -l RunSpecifiedTests -t ${{env.APEX_TESTS}} --verbose
                  

            - name: 'Check-only deploy delta changes - run NO tests'
              if: ${{ env.APEX_TESTS == 'None' }}
              run: |
                  sfdx force:source:deploy --manifest "manifest/package.xml" --postdestructivechanges "manifest/destructiveChangesPost.xml" -c -l NoTestRun --verbose
            #       fi
            